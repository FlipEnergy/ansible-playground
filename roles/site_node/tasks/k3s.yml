- name: Check if K3s version is installed
  ansible.builtin.command: k3s --version
  register: k3s_version_command
  ignore_errors: yes
  changed_when: False

- name: set K3s version fact
  set_fact:
    k3s_version: "{{ k3s_version_command.stdout | regex_search(regexp) }}"
  vars:
    regexp: 'v[0-9]+\.[0-9]+\.[0-9]+\+k3s[0-9]'
    cacheable: yes
  when: k3s_version_command.rc == 0

- name: install k3s via official script (first node)
  ansible.builtin.shell: curl -sfL https://get.k3s.io | INSTALL_K3S_VERSION={{ K3S_VERSION }} K3S_TOKEN={{ K3S_TOKEN }} INSTALL_K3S_EXEC="server --disable=traefik {{ K3S_EXTRA_OPTS }}" sh -s -
  when:
    - k3s_version_command.rc != 0 or k3s_version != K3S_VERSION
    - inventory_hostname == K3S_MASTER
  args:
    warn: False

- name: install k3s via official script (rest of the nodes)
  ansible.builtin.shell: curl -sfL https://get.k3s.io | INSTALL_K3S_VERSION={{ K3S_VERSION }} K3S_TOKEN={{ K3S_TOKEN }} K3S_URL=https://{{ K3S_MASTER }}:6443 INSTALL_K3S_EXEC="server --disable=traefik" sh -s -
  when:
    - k3s_version_command.rc != 0 or k3s_version != K3S_VERSION
    - inventory_hostname != K3S_MASTER
  args:
    warn: False

- name: Check if coredns configmap is updated
  ansible.builtin.shell: kubectl get configmap -n kube-system coredns -o json | grep /etc/resolv.conf
  register: coredns_pihole_server_grep
  ignore_errors: yes
  changed_when: False
  when:
    - inventory_hostname == K3S_MASTER
    - "'baremetal' in group_names"

- name: set dns nameserver for coredns
  ansible.builtin.shell: kubectl get configmap -n kube-system coredns -o json | sed 's+/etc/resolv.conf+{{ DNS_SERVER }}+g' | kubectl apply -f -
  when:
    - inventory_hostname == K3S_MASTER
    - "'baremetal' in group_names"
    - coredns_pihole_server_grep.rc == 0
